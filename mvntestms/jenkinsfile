pipeline {
    agent {
        kubernetes {
            cloud 'kubernetes'
            inheritFrom 'k8s-jnlp-jdk11'
        }
    }

    tools {
        maven 'maven'
    }

    parameters {
        string(name: 'HOST', description: 'Ingress host')
        choice(name: 'NAMESPACE', choices: [''], description: 'K8s Namespace')
        choice(name: 'DOCKER_REGISTRY', choices: ['registry.sumerge.local'], description: 'Docker registry')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Do you want to skip tests and sonarqube?')
        choice(name: 'SONAR', choices: ['http://sonarqube-temp.sumerge.local'], description: 'SonarQube host url')
    }

    options {
        skipStagesAfterUnstable()
        disableConcurrentBuilds()
    }

    stages {
        stage('Clean') {
            steps {
                sh 'mvn clean post-clean -Dbuild.number=${BUILD_NUMBER}'
            }
        }

        stage('Unit tests') {
            steps {
                sh 'mvn test -Dmaven.test.skip=${SKIP_TESTS} -Dbuild.number=${BUILD_NUMBER} -Dspring.profiles.active=kubernetes'
            }
        }

        stage('Integration tests') {
            steps {
                sh 'mvn integration-test verify -Dskip.surefire.tests -Dmaven.test.skip=${SKIP_TESTS} -Dbuild.number=${BUILD_NUMBER} -Dspring.profiles.active=kubernetes'
            }
        }

        stage('SonarQube') {
            steps {
                script {
                    if (params.SKIP_TESTS) {
                        echo "Test skip $SKIP_TESTS, so no SonarQube"
                    } else {
                        sh 'mvn sonar:sonar -Dsonar.host.url=${SONAR} -Dbuild.number=${BUILD_NUMBER} -Dspring.profiles.active=kubernetes'
                    }
                }
            }
        }

        stage('Docker') {
            steps {
                sh 'mvn compile jib:build -Ddocker.registry=${DOCKER_REGISTRY} -Dk8s.namespace=${NAMESPACE} -Dbuild.number=${BUILD_NUMBER} -Dspring.profiles.active=kubernetes'
            }
        }

        stage('K8s deploy') {
            steps {
                sh """
        sed -i "s|@DOCKER_REGISTRY@|${DOCKER_REGISTRY}|g" $WORKSPACE/kubernetes-db.yml
        sed -i "s|@NAMESPACE@|${NAMESPACE}|g" $WORKSPACE/kubernetes-db.yml
        mvn k8s:resource -Ddocker.registry=${DOCKER_REGISTRY} -Dhost=${HOST} -Dk8s.namespace=${NAMESPACE} -Dbuild.number=${BUILD_NUMBER} -Dspring.profiles.active=kubernetes
        kubectl apply -f $WORKSPACE/target/classes/META-INF/jkube/kubernetes.yml -n ${NAMESPACE}
        kubectl apply -f $WORKSPACE/kubernetes-db.yml -n ${NAMESPACE}
        kubectl apply -f $WORKSPACE/springboot-sa.yml -n ${NAMESPACE}
        """
            }
        }
    }
}
